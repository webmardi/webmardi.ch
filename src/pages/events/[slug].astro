---
import { isNil, isNotNil } from 'ramda';

import Button from '@/components/Button.astro';
import Sponsors from '@/components/Sponsors.astro';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { t } from '@/locales';
import { Event } from '@/types';
import { formatDate, getEvents, getLangName } from '@/utils';

export async function getStaticPaths() {
  const events: Event[] = await getEvents();
  return events
    .filter(i => isNotNil(i.slug))
    .map(event => ({
      params: { slug: event.slug },
      props: { event },
    }));
}

const { event } = Astro.props;
---

<BaseLayout title={event.title as string}>
  <main
    class="max-w-3xl px-4 mx-auto my-20"
    itemscope
    itemtype="https://schema.org/Event"
  >
    <h1
      class="col-span-2 text-xl font-bold md:text-xl lg:text-2xl"
      itemprop="name"
    >
      {event.title}
    </h1>
    {
      (isNotNil(event.subscriptionLink) || isNotNil(event.youtubeLink)) && (
        <div class="flex flex-wrap items-center mt-12 gap-x-8 gap-y-8">
          {isNotNil(event.subscriptionLink) && (
            <Button
              as="a"
              target="_blank"
              rel="noopener"
              href={event.subscriptionLink}
              itemprop="url"
              size="lg"
              scheme="cyan"
            >
              {t('hero.register')}
            </Button>
          )}
          {isNotNil(event.youtubeLink) && (
            <Button
              as="a"
              target="_blank"
              rel="noopener"
              href={event.youtubeLink}
              itemprop="url"
              size="lg"
              scheme="outline"
              iconRight="youtube"
            >
              {t('hero.live')}
            </Button>
          )}
        </div>
      )
    }
    <p class="mt-12" set:html={event.seoBody.replace(/\n/gm, '<br /><br />')} />
    <table class="mt-8 space-y-2 text-left table-auto">
      {
        isNotNil(event.speakerName) && (
          <tr
            itemscope
            itemprop="performer"
            itemtype="https://schema.org/Person"
            class="link"
          >
            <th class="pr-4 font-bold align-top">{t('event.speaker')}
            </th>
            <td>
              {isNotNil(event.speakerName) && isNil(event.speakerLink) && (
                <span set:html={event.speakerName} itemprop="name" />
              )}
              {isNotNil(event.speakerName) && isNotNil(event.speakerLink) && (
                // eslint-disable-next-line jsx-a11y/anchor-has-content
                <a
                  href={event.speakerLink}
                  target="_blank"
                  itemprop="name"
                  rel="noopener noreferrer"
                  set:html={event.speakerName}
                /><br />
              )}
              {isNotNil(event.speakerJob) && (
                <span
                  set:html={event.speakerJob}
                  itemprop="jobTitle"
                  class="mt-1"
                />
              )}
            </td>
          </tr>
        )
      }
      {
        isNotNil(event.language) && (
          <tr itemprop="inLanguage">
            <th class="pr-4 font-bold align-top">{t('event.lang')}</th>
            <td>
              {t('event.be_held')}
              {getLangName(event.language)}
            </>
          </tr>
        )
      }
      {
        isNotNil(event.types) && (
          <tr>
            <th class="pr-4 font-bold align-top">{t('event.who')}</th>
            <td>
              {event.types?.map(type => (
                <span>{t(`homepage.events.types.${type}`)}</span>
              ))}
            </td>
          </tr>
        )
      }
      {
        isNotNil(event.location) && (
          <tr itemprop="location">
            <th class="pr-4 font-bold align-top">{t('event.where')}</th>
            <td itemprop="location" set:html={event.location} />
          </tr>
        )
      }
      {
        isNotNil(event.date) && (
          <tr itemprop="inLanguage">
            <th class="pr-4 font-bold align-top">{t('event.when')}</th>
            <td>
              {
                isNotNil(event.date) && (
                  <time
                    datetime={formatDate(event.date, 'yyyy-MM-dd')}
                    itemprop="startDate"
                  >
                    {formatDate(event.date, 'd MMMM yyyy')}
                  </time>
                )
              }
              {
                isNotNil(event.date) && (
                  <time datetime="19:00" itemprop="startDate">
                    - 19:00
                  </time>
                )
              }
            </td>
          </tr>
        )
      }
    </table>
    <p class="mt-8">{t('event.youtube')}</p>
    <p
      class="mt-8"
      set:html={event.seoHashtags.replace(/\n/gm, '<br /><br />')}
    />
  </main>

  <Sponsors />
</BaseLayout>
